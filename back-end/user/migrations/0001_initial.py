# Generated by Django 5.2.4 on 2025-08-01 17:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Activity level (e.g., Low, Moderate, High)', max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Activity Level',
                'verbose_name_plural': 'Activity Levels',
            },
        ),
        migrations.CreateModel(
            name='BasicQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('key', models.SlugField(help_text='Unique identifier for the question (e.g., regular_cycle)', max_length=100, unique=True)),
                ('question_text', models.CharField(help_text='Text of the question (e.g., Do you have a regular cycle?)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description or context for the question', null=True)),
            ],
            options={
                'verbose_name': 'Basic Question',
                'verbose_name_plural': 'Basic Questions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DietaryStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Name of the dietary style (e.g., Vegan, Pescatarian)', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Dietary Style',
                'verbose_name_plural': 'Dietary Styles',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('value', models.CharField(blank=True, max_length=10, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Name of the goal (e.g., Balance hormones, Track my cycle)', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Goal',
                'verbose_name_plural': 'Goals',
            },
        ),
        migrations.CreateModel(
            name='StressLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Stress level (e.g., Low, Medium, High)', max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Stress Level',
                'verbose_name_plural': 'Stress Levels',
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text='Name of the symptom (e.g., Fatigue, Mood, Sleep)', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('height', models.PositiveIntegerField(blank=True, help_text='Height in centimeters', null=True)),
                ('weight', models.PositiveIntegerField(blank=True, help_text='Weight in kilograms', null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], help_text='Select your blood group', max_length=3, null=True)),
                ('adderess', models.TextField(blank=True, null=True)),
                ('discription', models.TextField(blank=True, null=True)),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='user.gender')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False, help_text='Indicates whether the daily reminder is active')),
                ('reminder_time', models.TimeField(blank=True, help_text='Time for the daily reminder', null=True)),
                ('user', models.ForeignKey(help_text='User associated with this reminder', on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reminder',
                'verbose_name_plural': 'Reminders',
            },
        ),
        migrations.CreateModel(
            name='Onboarding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('has_regular_cycle', models.BooleanField(blank=True, help_text='Do you have a regular cycle?', null=True)),
                ('is_menopausal', models.BooleanField(blank=True, help_text='Are you in perimenopause, menopause, or post-menopause?', null=True)),
                ('on_hormonal_treatment', models.BooleanField(blank=True, help_text='Are you currently on hormonal birth control or HRT?', null=True)),
                ('supplements_medications', models.TextField(blank=True, help_text='Supplements or medications the user is taking', null=True)),
                ('daily_reminder', models.BooleanField(default=False, help_text='Would you like a daily reminder?')),
                ('activity_level', models.ForeignKey(blank=True, help_text="User's activity level", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='user.activitylevel')),
                ('dietary_styles', models.ForeignKey(blank=True, help_text="User's dietary preferences", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='user.dietarystyle')),
                ('goals', models.ManyToManyField(blank=True, help_text="User's health and wellness goals", related_name='profiles', to='user.goal')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding', to='user.profile')),
                ('stress_level', models.ForeignKey(blank=True, help_text="User's stress level", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='user.stresslevel')),
                ('symptoms', models.ManyToManyField(blank=True, help_text="User's top health concerns", related_name='profiles', to='user.symptom')),
            ],
            options={
                'verbose_name': 'Onboarding',
                'verbose_name_plural': 'Onboardings',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='BasicAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('answer', models.BooleanField(blank=True, help_text="User's boolean answer to the question (True, False, or None)", null=True)),
                ('question', models.ForeignKey(help_text='Question being answered', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='user.basicquestion')),
                ('onboarding', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='basic_answers', to='user.onboarding')),
            ],
            options={
                'verbose_name': 'Basic Answer',
                'verbose_name_plural': 'Basic Answers',
                'ordering': ['-created_at'],
                'unique_together': {('onboarding', 'question')},
            },
        ),
    ]
